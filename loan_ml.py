# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1odsN24oBbCB6TZbidZtAsTMHDOxa-nLl
"""

import pandas as pd
import numpy as np

data=pd.read_csv("/loan_train.csv")

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

data['gender_new']= le.fit_transform(data['Gender'])
data['married_new']= le.fit_transform(data['Married'])
data['Dependents_new']=le.fit_transform(data['Dependents'])
data['Education_new']=le.fit_transform(data['Education'])
data['Self_Employed_new']=le.fit_transform(data['Self_Employed'])
data['Status_new']=le.fit_transform(data['Status'])

data=data.drop(['Married'],axis=1)
data=data.drop(['Gender'], axis=1)
data=data.drop(['Dependents'],axis=1)
data=data.drop(['Education'],axis=1)
data=data.drop(['Self_Employed'],axis=1)
data=data.drop(['Status'],axis=1)

from sklearn.preprocessing import MinMaxScaler
mms=MinMaxScaler()

data["Applicant_Income"] = mms.fit_transform(np.array(data['Applicant_Income']).reshape(-1,1))
data["Coapplicant_Income"] = mms.fit_transform(np.array(data['Coapplicant_Income']).reshape(-1,1))
data["Loan_Amount"] = mms.fit_transform(np.array(data['Loan_Amount']).reshape(-1,1))
data["Term"] = mms.fit_transform(np.array(data['Term']).reshape(-1,1))
data['Area']= le.fit_transform(data['Area'])

data.drop_duplicates(inplace=True)
data.dropna(how='any',axis=0,inplace=True)

from sklearn.model_selection import train_test_split
X = data.iloc[:, :-1]
y = data.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import matplotlib.pyplot as plt
detree=DecisionTreeClassifier()
detree.fit(X_train,y_train)
plt.figure(figsize=(15,10))
tree.plot_tree(detree,filled=True)

prediction=detree.predict(X_test)
print(prediction)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,prediction))

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)
from sklearn import metrics
y_pred = gnb.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred)*100)

from sklearn.svm import SVC
clf = SVC(kernel='linear',random_state=0)
clf.fit(X_train,y_train)
y_pred= clf.predict(X_test) 
print(accuracy_score(y_test,y_pred))

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print(accuracy_score(y_test,y_pred))

from sklearn.neighbors import KNeighborsClassifier  
knn= KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2 )  
knn.fit(X_train, y_train) 
y_pred=knn.predict(X_test)
print(accuracy_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")  
classifier.fit(X_train, y_train) 
y_pred= classifier.predict(X_test)
print(accuracy_score(y_test,y_pred))







